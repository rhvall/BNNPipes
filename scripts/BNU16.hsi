toT = V.map (flip shiftL 12)

weights0 = V.fromList [194,170,244,58,24,152,15,163] :: V.Vector Word16
thresholds0 = V.fromList [3,3,4,5,1,4,5,1] :: V.Vector Word16

weights1 = V.fromList [209,194,206,154,59,102,102,7] :: V.Vector Word16
thresholds1 = V.fromList [3,6,4,5,1,0,7,1] :: V.Vector Word16

weights2 = V.fromList [81,104,238,82,57,170,102,37] :: V.Vector Word16
thresholds2 = V.fromList [0,1,4,3,1,3,7,1] :: V.Vector Word16

bnuVec0 = V.zipWith (.|.) weights0 (toT thresholds0)
bnuVec1 = V.zipWith (.|.) weights1 (toT thresholds1)
bnuVec2 = V.zipWith (.|.) weights2 (toT thresholds2)

bnu0 = BNU16 bnuVec0
bnu1 = BNU16 bnuVec1
bnu2 = BNU16 bnuVec2

bnp = V.fromList [bnu0, bnu1, bnu2]
input = 9
queryBNU16 input bnu0
queryBNN16 input bnp

q1 = Query16 9 81

seed = mkStdGen 5
(bnp, g) = randomBNP16 seed 2 2 32
info = defaultPop
pop = (info, bnp)
selectBatch seed pop


expected = target
bnpScores = V.map (fitness expected) bnp
sorted = sortBNP16 bnp bnpScores
bnpSorSc = V.map (fitness expected) sorted


(info, bnp) = runEvolution fitnessNet target defaultPop
scores = V.map (fitnessNet target) bnp
bnp' = sortBNP16 bnp scores
scores' = V.map (fitnessNet target) bnp'
bnn = V.head bnp'
scores'

let seed = mkStdGen 5
let randomInput = V.fromList . Pr.take 30 $ (randomRs (0, 1.0) seed :: [Float])
let sinSample = V.map sin randomInput
let riInt = V.map (fromIntegral . round . (*) 1000) randomInput :: V.Vector BNU16Type
let siInt = V.map (fromIntegral . round . (*) 1000) sinSample :: V.Vector BNU16Type
randomInput
riInt
sinSample
siInt

---------

seed = mkStdGen (-2)
size = 3
(bnn, s') = randomBNN16 seed 2 3
(x,y) = (0,0)
evalRandIO $ updateBNNR bnn (x, y)
mm <- evalRandIO $ rdmIdxesR bnn 4
evalRandIO $ createPopByMutR bnn 3
-- replicateM size $ rdmIdx bnn size

(pop, s'') = createPopByMut s' bnn 4

-- bnn = transformToBNN16 [[0]]
w@(x, y, seed) = (0, 0, mkStdGen 0)
updateBNN  bnn w

vG = V.iterateN size (split . fst) (split seed)
vIdx = rdmIdxes vG bnn


seeds = V.fromList $ [(mkStdGen 22, mkStdGen 1), (mkStdGen 2, mkStdGen 10)]
bnn = transformToBNN16 [[16270,5286],[7567,35551]]
rdmIdxes seeds bnn

seed = mkStdGen 2
bnn = transformToBNN16 [[3,4,3],[],[],[0,0,4]]
size = 1
mm = evalRand (rdmIdx bnn size) seed

layer <- evalRandIO $ randomBNN16 12 12
 bnt = evalRand (irrRandomBNT16 10 10 10) (mkStdGen 4)
--bnt <- evalRandIO $ irrRandomBNT16 10 10 10
-- vecIn <- evalRandIO $ V.generateM 8 (\_ -> getRandomR (0, 4095)) :: IO (V.Vector BNU16Type)
vecIn <- evalRandIO $ V.generateM (V.length $ V.head bnt) (\_ -> getRandomR (0, 4095)) :: IO (V.Vector BNU16Type)
-- queryBNTLayer vecIn layer

input = V.fromList [1..3] :: V.Vector BNU16Type
bnu0 = evalRand (randomBNU16 10) (mkStdGen 0)
bnu1 = evalRand (randomBNU16 10) (mkStdGen 1)
bnu2 = evalRand (randomBNU16 4) (mkStdGen 2)
bnu3 = evalRand (randomBNU16 2) (mkStdGen 3)
bnl0 = V.fromList [bnu0, bnu1, bnu2]
bnl1 = V.fromList [bnu0, bnu3]
bnt = V.fromList [bnl0, bnl1]

resLPre = V.zipWith queryBNU16V input bnl0
joined x = V.foldl (V.++) V.empty x
splitted x = splitChunks x weight16SizeI
resLPos = V.map boolToBNU16Type . splitted $ joined resLPre
resFPre = V.zipWith queryBNU16V resLPos bnl1
resFPos = V.map boolToBNU16Type . splitted $ joined resFPre
r = queryBNU16V 2 bnu1

bnn = toBNN16 [[[4,15,12],[6,9,12],[2,8,9,6],[14,6,13,5],[16,0,15,4,9,0,14],[7,1,4,1],[5,7,14,4,10,12,8,3,9],[1,0,10,0,4],[0,3,11,2]],[[0,9,2,11,11,6,8],[],[6],[],[8,13,3,2],[7,0,15,6,7],[15,5]],[[11,12,10,8,15,2,7],[],[15,3,1,9,3,10,2],[10,2,8],[8,1,5,0,15],[],[10,9,12,14,10,3],[14,6,16]],[[2],[9,9,10,15,14,15],[11,0,3,10,6,1,16,5,7],[6,9,9,10,2,4,14,6],[4,5,1,9],[12,0,11]],[[7]],[[14,15,13,11,7,13,1,12]],[],[[2,13,12,2,0],[11,10,7],[15],[1,9],[14],[16,3,14,1,7],[13],[11,11,10,10,10,3,8,15]],[[7],[0,7],[13,10],[1,2,3,11],[4,7,14],[6,16,13,16,5],[1,15,5,5,7,2,7]]]
seed = mkStdGen (-1)
(_,seed') = split seed
w = (0,0,3)
mm = evalRand (updateBNN bnn w) seed
ms = evalRand (updateBNN bnn w) seed'
mm == ms
rdm = evalRand (rdmIdxes bnn size) seed
evalRand (V.forM rdm (updateBNN bnn)) seed
evalRand (V.forM rdm (updateBNN bnn)) seed'

rOutput = V.fromList [V.singleton 1, V.singleton 0, V.singleton 0, V.singleton 1]
rInput = V.fromList [V.singleton 0, V.singleton 1, V.singleton 2, V.singleton 3]
target = V.zipWith QueryVec rInput rOutput

bnpU <- evoXOR
scores' = V.map (`queryBNP16` bnpU) rOutput
scores = V.map V.head $ V.head scores'
bnp = sortUsingVec bnpU scores
bnn = V.head bnp
input = V.map V.head rInput
V.map (\x -> queryBNN16 x bnn) rInput

popInfo = PopInfo 2 1 2 64 10 64 1024
seed = mkStdGen 1
bnp = evalRand (randomBNP16 (sizeBNU popInfo) (sizeLayer popInfo) (sizeNet popInfo) (sizePop popInfo)) seed
fitness = fitnessNet
expected = target
pop = (popInfo, bnp)

let bnpScores = V.map (fitness expected) bnp
let sorted = sortUsingVec bnp bnpScores
let popSize = sizePop info
pop' <- createPopByMut (V.head sorted) (popSize - 1)
return (info, pop')


---------------------

seed = mkStdGen 0
(seed', seed'') = split seed
sinSample <- evalRand (sampleSIN 5) seed
prec = 2
target = V.map (\(x,y) -> QueryVec (floatToVec x prec) (floatToVec y prec)) sinSample
input = V.map inQV target
popInfo = PopInfo 4 4 10 128 20 40 10024
bnp <- evalRand (randomBNP16 (sizeBNU popInfo) (sizeLayer popInfo) (sizeNet popInfo) (sizePop popInfo)) seed'
let iteration (pop, gen) = evolve fitness expected pop >>= \x -> return (x, gen + 1)
(pop', _) <- iteration ((popInfo, bnp), 0)
